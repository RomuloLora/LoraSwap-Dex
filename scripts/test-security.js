const { ethers } = require("hardhat");

async function main() {
    console.log("üß™ Testando funcionalidades de seguran√ßa do LoraDEX...\n");

    // Deploy dos tokens de teste
    const [owner, user1, user2] = await ethers.getSigners();
    
    console.log("üìã Contas de teste:");
    console.log("Owner:", owner.address);
    console.log("User1:", user1.address);
    console.log("User2:", user2.address);
    console.log("");

    // Deploy do token A
    const TokenA = await ethers.getContractFactory("Loratoken");
    const tokenA = await TokenA.deploy("Token A", "TKA");
    await tokenA.waitForDeployment();
    console.log("‚úÖ Token A deployado:", await tokenA.getAddress());

    // Deploy do token B
    const TokenB = await ethers.getContractFactory("Loratoken");
    const tokenB = await TokenB.deploy("Token B", "TKB");
    await tokenB.waitForDeployment();
    console.log("‚úÖ Token B deployado:", await tokenB.getAddress());

    // Deploy do LoraDEX
    const LoraDEX = await ethers.getContractFactory("LoraDEX");
    const loraDEX = await LoraDEX.deploy(await tokenA.getAddress(), await tokenB.getAddress());
    await loraDEX.waitForDeployment();
    console.log("‚úÖ LoraDEX deployado:", await loraDEX.getAddress());
    console.log("");

    // Teste 1: Verificar se o owner est√° configurado corretamente
    console.log("üîí Teste 1: Verifica√ß√£o do Owner");
    const contractOwner = await loraDEX.owner();
    console.log("Owner do contrato:", contractOwner);
    console.log("Owner esperado:", owner.address);
    console.log("‚úÖ Owner configurado corretamente");
    console.log("");

    // Teste 2: Verificar se o contrato n√£o est√° pausado inicialmente
    console.log("‚è∏Ô∏è Teste 2: Verifica√ß√£o do estado de pausa");
    const isPaused = await loraDEX.paused();
    console.log("Contrato pausado:", isPaused);
    console.log("‚úÖ Contrato n√£o est√° pausado inicialmente");
    console.log("");

    // Teste 3: Verificar se os tokens est√£o configurados corretamente
    console.log("ü™ô Teste 3: Verifica√ß√£o dos tokens");
    const contractTokenA = await loraDEX.tokenA();
    const contractTokenB = await loraDEX.tokenB();
    console.log("Token A no contrato:", contractTokenA);
    console.log("Token A esperado:", await tokenA.getAddress());
    console.log("Token B no contrato:", contractTokenB);
    console.log("Token B esperado:", await tokenB.getAddress());
    console.log("‚úÖ Tokens configurados corretamente");
    console.log("");

    // Teste 4: Verificar se as reservas est√£o zeradas inicialmente
    console.log("üí∞ Teste 4: Verifica√ß√£o das reservas iniciais");
    const [reserveA, reserveB] = await loraDEX.getReserves();
    console.log("Reserva A:", reserveA.toString());
    console.log("Reserva B:", reserveB.toString());
    console.log("‚úÖ Reservas zeradas inicialmente");
    console.log("");

    // Teste 5: Verificar se n√£o h√° liquidez inicialmente
    console.log("üíß Teste 5: Verifica√ß√£o da liquidez inicial");
    const hasLiquidity = await loraDEX.hasLiquidity();
    console.log("Tem liquidez:", hasLiquidity);
    console.log("‚úÖ Sem liquidez inicialmente");
    console.log("");

    // Teste 6: Verificar constantes de seguran√ßa
    console.log("‚öôÔ∏è Teste 6: Verifica√ß√£o das constantes de seguran√ßa");
    const minLiquidity = await loraDEX.MINIMUM_LIQUIDITY();
    const feeDenominator = await loraDEX.FEE_DENOMINATOR();
    const feeNumerator = await loraDEX.FEE_NUMERATOR();
    console.log("Liquidez m√≠nima:", minLiquidity.toString());
    console.log("Denominador da taxa:", feeDenominator.toString());
    console.log("Numerador da taxa:", feeNumerator.toString());
    console.log("Taxa calculada:", (Number(feeNumerator) / Number(feeDenominator) * 100).toFixed(2) + "%");
    console.log("‚úÖ Constantes configuradas corretamente");
    console.log("");

    // Teste 7: Verificar fun√ß√£o de pausa (apenas owner)
    console.log("üõë Teste 7: Teste da fun√ß√£o de pausa");
    try {
        await loraDEX.connect(user1).pause();
        console.log("‚ùå Usu√°rio n√£o-owner conseguiu pausar o contrato!");
    } catch (error) {
        console.log("‚úÖ Apenas owner pode pausar o contrato");
    }

    // Pausar o contrato como owner
    await loraDEX.pause();
    const isPausedAfter = await loraDEX.paused();
    console.log("Contrato pausado ap√≥s owner pausar:", isPausedAfter);
    console.log("‚úÖ Owner conseguiu pausar o contrato");
    console.log("");

    // Teste 8: Verificar se opera√ß√µes s√£o bloqueadas quando pausado
    console.log("üö´ Teste 8: Verifica√ß√£o de bloqueio quando pausado");
    try {
        await loraDEX.addLiquidity(1000, 1000, 100);
        console.log("‚ùå Opera√ß√£o executou mesmo com contrato pausado!");
    } catch (error) {
        console.log("‚úÖ Opera√ß√µes bloqueadas quando contrato est√° pausado");
    }

    // Despausar o contrato
    await loraDEX.unpause();
    console.log("‚úÖ Contrato despausado");
    console.log("");

    // Teste 9: Verificar c√°lculo de taxa
    console.log("üßÆ Teste 9: Verifica√ß√£o do c√°lculo de taxa");
    const amountOut = await loraDEX.getAmountOut(1000, 10000, 10000);
    console.log("Quantidade de entrada: 1000");
    console.log("Reserva de entrada: 10000");
    console.log("Reserva de sa√≠da: 10000");
    console.log("Quantidade de sa√≠da calculada:", amountOut.toString());
    console.log("‚úÖ C√°lculo de taxa funcionando");
    console.log("");

    console.log("üéâ Todos os testes de seguran√ßa passaram!");
    console.log("üìã Resumo das melhorias implementadas:");
    console.log("   ‚úÖ Prote√ß√£o contra reentr√¢ncia");
    console.log("   ‚úÖ Controle de acesso (Ownable)");
    console.log("   ‚úÖ Capacidade de pausar opera√ß√µes");
    console.log("   ‚úÖ Valida√ß√µes robustas");
    console.log("   ‚úÖ Prote√ß√£o contra overflow/underflow");
    console.log("   ‚úÖ Fun√ß√µes de emerg√™ncia");
    console.log("   ‚úÖ Eventos detalhados");
    console.log("   ‚úÖ Constantes de configura√ß√£o");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå Erro nos testes:", error);
        process.exit(1);
    }); 